::NEXT::
-get game back to its original state with lea's new assets
-fake PD
	DONE-grid of numbers representing difficulty
	IGNORE-particle effect created over numbers that change
	-

::D/P system::
:abstract:
-character -> statistics
-questionnaire -> modifies stats -> modifies character perfectness based on their stats
-performance -> generates dialog -> modifies difficultly based on stats
-create a mini version of this in python or something
:stats:
-TODO this sucks
-<-> means two stats are inversely proportional
	-stress<->relax (were stressed, were relaxed) 
	-respect (were well respected) 
	-money<->poor (made a lot of money, had a good standard of living, lived humbly, poorly)
	-sexy (had a good sex life)
	-health (were healthy)
	-education (learned a lot)
	-wisdom (gained life experience)
-stats have opposing for sentence construction	
	-using "but" and "and" to construct sentences
:sentences:
-you performed the <awful/mediocre/good/perfect> life of a ______ <terribly/passable/ok/excellently>
-foreach stat that changed signifigantly
	-construct sentence
	-wait
	-change difficulties
	-wait



::BIG QUESTIONS::
-unloading asset bundles!!! omg
	-try reloading current scene to restart game
DONE-skeleton is different, figure out what skeleton information is good!!
DONE/OK-make sure all information can be obtained from openNI on OSX
		DONE-hand position is good but I guess not rotation?? (not that I care)
		DONE-need to use left/rightKnee rotation and not position of foot
-figure out why it takes so long to load on OSX, does it take this long on windows??
	DONE/a little slower but still not as slow-try running on windows using openni+NITE
-why is Nearest Neighbor scaling not NN	

	
::NEW ZIG MANAGER NONSENSE::
-POSE current and POSE target to do interpolation
-POSE target updated via whatever
	-this means either using positions or angles as before
-if you can't get waist in openNI, need to disable it in pose rendering and grading
IGNORE, only happens in ProjectionManager contained mess...-remove get_relative and instead hardcode relative joint information and just do get_angle(ZigJointId)
DONE-need definitive function to determine openNI or Kinect and use different algorithms in each case
	-function to detect what SDK is being used, this needs to look for zig input container after startup and read which sdk is being used... pfft


::TODO::
:other:
-grade against position offset as well??? (or move the transparent one with it) Snap position???
-do the feet, i.e. want feet to stick to ground 
IGNORE-create character testing project (in ggfiles even)
DONE-add quit button
DONE-add keyboard playability (skip)
DONE-move project in repo into its own folder so I can add other projects to the main repo.
DONE-set up the asset repo (see below)
BLAH-nearest neighbor shader!!

:kinect related:
-consider getting snapping to work, but I don't think it's really needed anymore
-figure out why it's a little messed up on some angles. probably a bug in code
DONE-improve architecture for accessing kinect data
	-make kinect data class manager	
	-is user found
	-is kinect found
	-get angles (has default ones if no user is found)
DONE-get the angles right on osx

:scripting architecture:
-TODO
-need lea's story board

:flat architecture:
-clean it up and decide if it's ready to ship

:other architecture:
-TODO
IGNORE-Projection Manager kind of sucks
	-create a new kinect data algorithm manager (interface?)
	-takes input from kinect (has access to zigfu I guess), processes (can keep internal state)
	-outputs data in various forms
	
:file architecture:
-better loading scheme for asset bundles
DONE-implement new asset bundle structure
IGNORE-redesign it so it's not a big sloppy mess liek it is now... or not
DONE-characters should be read in based on filenames from asset bundles
	-if fail, should not crash (or maybe it should..)
DONE-write script to convert placement images to TextAssets containing needed info
DONE-write a script to shrink all assets so they aren't ridiculous.
	-can we incorporate both of the above scripts into unity??? that would be AWESOME
DONE-make unity editor script more awesome
	-incorporate scripts from above :DDD
	-be able to bulk export all asset bundles
	


::IMPORTANT::
DONE-remove all background image references 

::ASSET PIPELINE::
DONE-using current system, can you
	-create text asset associated with each image.
	-text asset should contain original file size information
	-parse B images for point location and add to text file
	-resample images if necessary, put this and text file in new directory
	-finally, automatically make me an asset bundle :)
	-but I guess if you can't do that then you'll want to use a python script of sorts
DONE-new file naming scheme
	-Assets/PRECHAR/<character number>/ (where character number is as before, e.g. 05-1)
	-AUDIO.mp3 for audio
	-character files as before, but no longer in CHARACTERS folder
	-background files should be as follows
		-BACKGROUND.png for background
		-BG-1.png, BG-2.png, ... for BG elements
		-FG-1.png, ... for FG elements
		-POSITIONS.png for positions
		
		
::TODO::
DONE-fix relative positioning with flat camera
DONE-seperate out body manager poo poo
DONE-fix depth and sun shaft for character, can you do it????
DONE-be able to move character
DONE-make sure you fix waist grading because it's different now
DONE-figure out whats wrong with grading



::RIGHT MANAGER NOTES::
DONE-meters
	-color(s), length, percentage, effects <- (blink, change color, flash)
-flashing choose next thingy
-score manager

-TimedEventUtility
	-these are per class instance
	
-FlatElementSubManager
	-creates camera for all flat elements etc
	
-everything parents from FlatElementBase
	-gameobject parent
	-spatial position original orientation
	-flash/shake/jiggle/fade(start delay, time (-1 is contiunous)
	-set_flash/shake/jiggle/fade_parameters
	-ordering and positioning functionality
	
-transfer particle effect manager
	-source area
	-target area
	-set_movement_parameters
	
-MenuManager
	-initial position of elements
	-animation of elements
	
	

::TODO2.0::
-test in mac browser as well as stupid kinect
-make sure scaling is nearest neighbor (shader??)
-other ways to indicate correct pose of puppet
	-say, start level with puppet in right pose
-make some sort of right sided manager nonsense business
-grading manager
	DONE-fix it
	-needs to actually do stuff now lol
-particles
-snapping
DONE-fix the roll around bug 
DONE-move transparent body behind not transparent
DONE-music
DONE-actually fix depth issue
DONE-pose from kniect needs to read torso angle
DONE-why is waist not working


::TODO::
DONE-center background
DONE-switch entire projection system nonsense to record angles yada yada yada
DONE-maybe switch grading to use angles too because that's what it's suppose to be
DONE-do z-depth on ordering that lea gave you

::TODO::
DONE-scan images for connection points instead of using relative positions
DONE-put in lea's characetr

:::backend::
::input dictionary::
DONE-stores input, position and rotation of all joints
DONE-has accessors for reading relative rotations between two joints
	-based on position and not rotation

::2d projection manager::
DONE-use relative accessors to determine orientation for body parts
	-determine front facing plane
	DONE-project positions into plane, find angle in plane, map to angles as appropriate. 
	CLOSE ENOUGH-add smoothing to angles

::grading manager:: 
DONE-checking
	-do least squares on rotations in 2d
-getting 
	DONE-record position, flatten via projection, save
	-virtual mannequin of 2d points, move in unity, write and save angles
::visual::
DONE-drawing the person
	-use torso as center point
DONE-joint positions
	-design rule for determining joint points based on texture size
		-make a decision, tell lea
	-write code to procedurally generate mesh for the person using create primitive and resizing
		-double child all body parts to get centers properly
		-create hierarchy of parts
DONE-person in X Y plane with Y facing up and X facing right and Z facing forward

	