::NEEEEEW GAME MANAGER NONSENSE::
-EVENTS (ngm is responsible for most scripted events)
	-transition to CUTSCENE  (or skip this and go straight to CHOOSE for fetus)
		-INTERFACE 
		-BACKGROUND
	-transition to DEATH
		-INTERFACE 
		-BACKGROUND
		-go to transition to GRAVE
	-transition to CHOOSE
		-INTERFACE (BLUE BAR)
	-transition to PLAY
		-INTERFACE (BLUE BAR)
	-transition to TRANSITION (play)
		-TRANSITION -> BUNDLE -> TRANSITION
	-transition to TRANSITION (grave)
		-TRANSITION -> BUNDLE -> TRANSITION

-CUTSCENE
	-FETUS
		-skip
	-REG
	-DEATH
	-100
	-GRAVE
		-see grave section
-GRAVE
	-HISTORY (graph + text -> angle)
	-STORY (your ___ made it ____ to be ____)
	-FINAL SCORE (whizz bang!!!)
	-CREDITS

-FETUS
	-basically do nothing lol
	-needs to NOT update the bluebar
-NORMAL
	-internal SCORE
	-update UI
		-score
		-graph
		-effects
	-tell BACKGROUND to glow
-100
	-???
-GRAVE
	-restart game lol


	



::NEW POSE NONSENSE::
-NAMING FORMAT
	-<age>-<1/2/3/4>_<a/b/c/d>-<1/2/3/...>.txt (should always be 3 frames, but can be more/less)
	-fallback to characters in same age
	
	
::NEW INTERFACE MANAGER NONSENSE::
-BLUE BAR
	-PLAY
		-NAME
		-PERFORMANCE GRAPH
		-SCORE
		-transition to CUTSCENE
	-CUTSCENE
		-???
		-transition to CHOOSE
	-CHOOSE
		-variable # CHOICES
		-variable # CHOICE_BODY
		-put MINIMAN in extra space to the right
		-transition to PLAY -> (fade)
-PINK BAR
	-variable 3/4 CHARS
	-PLAY
		-display past CHARS above BLUE BAR
		-display all future CHARS below BLUE BAR
	-CUTSCENE
		-TODO???
	-UNTIMELY DEATH
		-future choices fall off the bottom (ugg) -> (fade)
	-GRAVE
		-PERFORMANCE CHARTS come in one at a time
			-synchronized with TEXT
			-synchronized with GLORY
		-TODO other sentences...
-TEXT
	-displays messages over character
-GLORY
	-GRAVE
		-characters come in one at a time surounding the grave in an arc
		-words appear on the grave
			-maybe special glowy light effect over grave????

::TODO3::
-make a test build relatively soon to make sure everything is stil OK
-setup asset bundler to load new poses
-move character
-make it so you can choose your pose in testing scene
-mellow out glow
-add character name to characterdata so you don't need to pass name around :(
-delete
	-InterfaceManager
	-GameManger
	-GameEvents
	-InterfaceBehaviour

DONE-add scaling to flat font
DONE-remove zigdepthviewer from scripts in testing scene and recording scene
	
DONE-test your new font module
DONE-make the game runnable without kinect
IGNORE-make sure the game works and restarts properly
DONE-get old version running OK on a machine as a backup
-make pose cycling for performance...
-transitioning into the game
	-start the game blown out white and fade into the game??
	-consider doing the render texture trick to overwrite the UI nonsensen
DONE-type up usage guide for lea
DONE-type up usage guide for cutscenes and death
DONE-fix pose recording???
DONE-add new characters from lea
DONE-make test bundle version please!!! GEEZ
DONE-use Colliderless plane


:EASY POSE:
DONE-take screen cap when doing so...
DONE-allow manual mode (fuck)
IGNORE-fix that one bug in asset bundle loading 

:CONFIG SCREEN:
DONE-set colors properly on depth image
	DONE-gray on white
-display logo image nonsense for at least 5 seconds
	-either says kinect detected please wait for game to begin
	-or kinect not found
DONE-transition to depth image, position in center
-please make a T-pose
	-hold it (and do some sort of color bar transition)
-transition to game
	DONE-bonus, have depth image shrink into corner when game starts

:GAME:
-new pose system/grading
	-TODO
-PD system
	-fuck
-game scripting
	-TODO

:UI:
-font writing class
	-TODO
-new GRAPH component
	-keep a FlatGraphElement[7] ages (for final score screen)
	-create texture2d matching PERFORMANCE.png
	DONE-create draw point function (draws a circle at a given point)
	-call/use as appropriate
-new bars
	-remove pink bar
	-clean out the current blue bar
	-display name and age
	-display performance graph (above)	
		-shake when time is running out
		-flash when near perfect
	-display score graph
		-shake on near perfect score
-new icons
	DONE-asset bundle generator for these ages
		-shrink images and connection points as appropriate
		-flatten colors
		-create <age>_tiny.unity3d
		YES-can we bulk operate this???
	-preload in all icons at beginning of game (is this ok??)
	-do the animations from the poses
	-set the colors according to difficulty
	-display only perfectness stars
	-test it, does it run fast enough?? (maybe make a slow version)
-new message system
	-enter_message(string, message, time)
	-exit message (if needed)
-new choice system
	-on enter
		-fly out score and title
		-fly in new text and choices
		-enlarge blue bar
	-on exit
		-reverse
	-new graphics, and new animated characters for icons
		-new flat class to do this
		-display perfectness only
	-where do I put the guy when no choice is selected?
-particle effect system nonsense
	-TODO
-new font system
-new text overlay system
	-uses font system	
	-draws one of several random bubbles over the play area of the screen
	
:CUTSCENES:
-add cutscene elements to the file format
	-CUTSCENE<X>-<Y>.png 
	-dot in POSITION.png where color is (0,0,X + Y * 5,255)
	-ordered from top to bottom
-bonus, text file describing effects
	-EFFECTS.txt
		-<filename> <effect name> <value>
		-if not specified, then uses default effect
-transition in
	-fly out all BG FG and character elements
	-fly in all cutscene elements for appropriate cutscene

:EARLY DEATH:
-generic death version
	-store it inside of a generic character container??? (or double use the graveyard/fetus scene or something)
-for specific death, use CUTSCENE4 and same format above
-restart game (by reloading the scene I guess)

:NORMAL DEATH:
-this is just a specific death at age 80
-additionally, different text

:BONUS:
-goes to age 100 
-presents only one choice
-4 stars!
-plays different text

:END/WIN:
-blow the screen out white and transition into graveyard
-for each character
	-character icons come up from the bottom w/performance charts
	-text bubble describing achievement	
	-reflect change on graveyard
	-draw angel teehee
-blow the screen out white
-end the game


		
::NEXT::
DONE-do configuration screen somehow???
DONE (bad fix)-get rid of the zigfu logo
DONE/goodenough-do scene reset at end of game and see if that solves your memory issue
DONE/CLOSE ENOUGH-get game back to its original state with lea's new assets
-fake P
	DONE-grid of numbers representing difficulty
	IGNORE-particle effect created over numbers that change
	-

::BIG QUESTIONS::
DONE/CLOSE ENOUGH-unloading asset bundles!!! omg
	DONE-try reloading current scene to restart game
DONE-skeleton is different, figure out what skeleton information is good!!
DONE/OK-make sure all information can be obtained from openNI on OSX
		DONE-hand position is good but I guess not rotation?? (not that I care)
		DONE-need to use left/rightKnee rotation and not position of foot
-figure out why it takes so long to load on OSX, does it take this long on windows??
	DONE/a little slower but still not as slow-try running on windows using openni+NITE
-why is Nearest Neighbor scaling not NN	

	
::NEW ZIG MANAGER NONSENSE::
-POSE current and POSE target to do interpolation
-POSE target updated via whatever
	-this means either using positions or angles as before
-if you can't get waist in openNI, need to disable it in pose rendering and grading
IGNORE, only happens in ProjectionManager contained mess...-remove get_relative and instead hardcode relative joint information and just do get_angle(ZigJointId)
DONE-need definitive function to determine openNI or Kinect and use different algorithms in each case
	-function to detect what SDK is being used, this needs to look for zig input container after startup and read which sdk is being used... pfft


::TODO::
:other:
-grade against position offset as well??? (or move the transparent one with it) Snap position???
-do the feet, i.e. want feet to stick to ground 
IGNORE-create character testing project (in ggfiles even)
DONE-add quit button
DONE-add keyboard playability (skip)
DONE-move project in repo into its own folder so I can add other projects to the main repo.
DONE-set up the asset repo (see below)
BLAH-nearest neighbor shader!!

:kinect related:
-consider getting snapping to work, but I don't think it's really needed anymore
DONE-write character debugger to figure out why everything is fucked up
DONE-figure out why it's a little messed up on some angles. probably a bug in code
DONE-improve architecture for accessing kinect data
	-make kinect data class manager	
	-is user found
	-is kinect found
	-get angles (has default ones if no user is found)
DONE-get the angles right on osx

:scripting architecture:
-TODO
-need lea's story board

:flat architecture:
-clean it up and decide if it's ready to ship

:other architecture:
-TODO
IGNORE-Projection Manager kind of sucks
	-create a new kinect data algorithm manager (interface?)
	-takes input from kinect (has access to zigfu I guess), processes (can keep internal state)
	-outputs data in various forms
	
:file architecture:
IGNORE-better loading scheme for asset bundles
DONE-implement new asset bundle structure
IGNORE-redesign it so it's not a big sloppy mess liek it is now... or not
DONE-characters should be read in based on filenames from asset bundles
	-if fail, should not crash (or maybe it should..)
DONE-write script to convert placement images to TextAssets containing needed info
DONE-write a script to shrink all assets so they aren't ridiculous.
	-can we incorporate both of the above scripts into unity??? that would be AWESOME
DONE-make unity editor script more awesome
	-incorporate scripts from above :DDD
	-be able to bulk export all asset bundles
	


::IMPORTANT::
DONE-remove all background image references 

::ASSET PIPELINE::
DONE-using current system, can you
	-create text asset associated with each image.
	-text asset should contain original file size information
	-parse B images for point location and add to text file
	-resample images if necessary, put this and text file in new directory
	-finally, automatically make me an asset bundle :)
	-but I guess if you can't do that then you'll want to use a python script of sorts
DONE-new file naming scheme
	-Assets/PRECHAR/<character number>/ (where character number is as before, e.g. 05-1)
	-AUDIO.mp3 for audio
	-character files as before, but no longer in CHARACTERS folder
	-background files should be as follows
		-BACKGROUND.png for background
		-BG-1.png, BG-2.png, ... for BG elements
		-FG-1.png, ... for FG elements
		-POSITIONS.png for positions
		
		
::TODO::
DONE-fix relative positioning with flat camera
DONE-seperate out body manager poo poo
DONE-fix depth and sun shaft for character, can you do it????
DONE-be able to move character
DONE-make sure you fix waist grading because it's different now
DONE-figure out whats wrong with grading



::RIGHT MANAGER NOTES::
DONE-meters
	-color(s), length, percentage, effects <- (blink, change color, flash)
-flashing choose next thingy
-score manager

-TimedEventUtility
	-these are per class instance
	
-FlatElementSubManager
	-creates camera for all flat elements etc
	
-everything parents from FlatElementBase
	-gameobject parent
	-spatial position original orientation
	-flash/shake/jiggle/fade(start delay, time (-1 is contiunous)
	-set_flash/shake/jiggle/fade_parameters
	-ordering and positioning functionality
	
-transfer particle effect manager
	-source area
	-target area
	-set_movement_parameters
	
-MenuManager
	-initial position of elements
	-animation of elements
	
	

::TODO2.0::
-test in mac browser as well as stupid kinect
-make sure scaling is nearest neighbor (shader??)
-other ways to indicate correct pose of puppet
	-say, start level with puppet in right pose
-make some sort of right sided manager nonsense business
-grading manager
	DONE-fix it
	-needs to actually do stuff now lol
-particles
-snapping
DONE-fix the roll around bug 
DONE-move transparent body behind not transparent
DONE-music
DONE-actually fix depth issue
DONE-pose from kniect needs to read torso angle
DONE-why is waist not working


::TODO::
DONE-center background
DONE-switch entire projection system nonsense to record angles yada yada yada
DONE-maybe switch grading to use angles too because that's what it's suppose to be
DONE-do z-depth on ordering that lea gave you

::TODO::
DONE-scan images for connection points instead of using relative positions
DONE-put in lea's characetr

:::backend::
::input dictionary::
DONE-stores input, position and rotation of all joints
DONE-has accessors for reading relative rotations between two joints
	-based on position and not rotation

::2d projection manager::
DONE-use relative accessors to determine orientation for body parts
	-determine front facing plane
	DONE-project positions into plane, find angle in plane, map to angles as appropriate. 
	CLOSE ENOUGH-add smoothing to angles

::grading manager:: 
DONE-checking
	-do least squares on rotations in 2d
-getting 
	DONE-record position, flatten via projection, save
	-virtual mannequin of 2d points, move in unity, write and save angles
::visual::
DONE-drawing the person
	-use torso as center point
DONE-joint positions
	-design rule for determining joint points based on texture size
		-make a decision, tell lea
	-write code to procedurally generate mesh for the person using create primitive and resizing
		-double child all body parts to get centers properly
		-create hierarchy of parts
DONE-person in X Y plane with Y facing up and X facing right and Z facing forward

	